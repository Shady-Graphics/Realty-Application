package gui;

import com.sun.rowset.JdbcRowSetImpl;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.net.URLConnection;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

public class retrieveUpdateDelete extends javax.swing.JFrame {

    ImageIcon icon = new ImageIcon("src/images/icon.png");
    Image symbol = icon.getImage();
    Image map = icon.getImage();
    ImageIcon pics;
    search s;
    JdbcRowSetImpl searchResults = new JdbcRowSetImpl();
    int id = 0;
    String photo = "";
    //variables used for storing updated data in the form
    String street;
    int noBedrooms;
    float noBathrooms;
    int squarefeet;
    String description;
    String user;
    String date;
    //currency format
    DecimalFormat currency = new DecimalFormat("â‚¬ 0,000.00");

    public retrieveUpdateDelete(String user, String date) throws HeadlessException {
        initComponents();
        this.user = user;
        this.date = date;

    }

    /** Creates new form insert */
    public retrieveUpdateDelete(Double minPrice, Double maxPrice, String user, String date) throws SQLException {
        initComponents();
        this.user = user;
        this.date = date;
        this.setIconImage(symbol);
        viewPhotoButton.setVisible(false);

        enableForm(false);
        this.setVisible(false);
        s = new search();
        s.setVisible(true);
    }

    public retrieveUpdateDelete(String loacation, Double minPrice, Double maxPrice, String user, String date) throws SQLException {
        initComponents();
        this.user = user;
        this.date = date;
        this.setIconImage(symbol);
        this.setTitle("Properties available in " + loacation);
        enableForm(false);
        //searchResults.setUrl("jdbc:mysql://itshares.student.litdom.lit.ie:3306/litrealtyrobertm");
        //searchResults.setUsername("isd3user");
        //searchResults.setPassword("pass");
        searchResults.setUrl("jdbc:mysql://localhost/cp");
        viewPhotoButton.setVisible(false);

       
        searchResults.setUsername("root");
        searchResults.setPassword("");
        searchResults.setCommand("SELECT * FROM properties WHERE city = ? AND price > ? < ?");
        searchResults.setString(1, loacation);
        searchResults.setDouble(2, minPrice);
        searchResults.setDouble(3, maxPrice);
        searchResults.execute();
        searchResults.next();
        if (!searchResults.next()) {
            s = new search(this.user, this.date);
            s.setVisible(true);
            //System.out.print("Test");
            JOptionPane.showMessageDialog(this, "No Properties match the criteria");
            this.setVisible(false);

            //his.setVisible(false);
        } else {
            searchResults.beforeFirst();
            insertDataNext();
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        imageLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        streetTF = new javax.swing.JTextField();
        NoBedTF = new javax.swing.JTextField();
        noBathTF = new javax.swing.JTextField();
        squareFeetTF = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        descriptionTA = new javax.swing.JTextArea();
        houseLbl = new javax.swing.JLabel();
        priceLbl = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        nextBut = new javax.swing.JButton();
        previousBut = new javax.swing.JButton();
        updateBut = new javax.swing.JButton();
        deleteBut = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        mapButton = new javax.swing.JButton();
        viewPhotoButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        imageLabel.setFont(new java.awt.Font("Tahoma", 0, 24));
        imageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/LIT_Logo.jpg"))); // NOI18N
        imageLabel.setText("   Lit Realty");

        jLabel1.setText("Street:");

        jLabel2.setText("No. of Bedrooms:");

        jLabel3.setText("No. of Bathrooms:");

        jLabel4.setText("Square Feet:");

        jLabel5.setText("Description:");

        streetTF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                streetTFMouseClicked(evt);
            }
        });

        NoBedTF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                NoBedTFMouseClicked(evt);
            }
        });

        noBathTF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                noBathTFMouseClicked(evt);
            }
        });

        squareFeetTF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareFeetTFMouseClicked(evt);
            }
        });

        descriptionTA.setColumns(20);
        descriptionTA.setLineWrap(true);
        descriptionTA.setRows(5);
        descriptionTA.setWrapStyleWord(true);
        descriptionTA.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                descriptionTAMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(descriptionTA);

        priceLbl.setText("price");

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        nextBut.setText("next");
        nextBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButActionPerformed(evt);
            }
        });

        previousBut.setText("previous");
        previousBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousButActionPerformed(evt);
            }
        });

        updateBut.setText("update");
        updateBut.setEnabled(false);
        updateBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButActionPerformed(evt);
            }
        });

        deleteBut.setText("delete");
        deleteBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButActionPerformed(evt);
            }
        });

        backButton.setText("cancel");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(nextBut, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 98, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(previousBut)
                .add(updateBut, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 98, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(deleteBut, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 98, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(backButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 98, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(nextBut, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(previousBut, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(updateBut, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(deleteBut, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(backButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );

        mapButton.setText("View Map");
        mapButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mapButtonActionPerformed(evt);
            }
        });

        viewPhotoButton.setText("View Photo");
        viewPhotoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPhotoButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel1)
                                    .add(jLabel3)
                                    .add(jLabel2)
                                    .add(jLabel4)
                                    .add(jLabel5))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(streetTF, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                                    .add(NoBedTF, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                                    .add(noBathTF, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                                    .add(squareFeetTF, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                            .add(imageLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 330, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(houseLbl, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 379, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(priceLbl)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(viewPhotoButton)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(mapButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 113, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(40, Short.MAX_VALUE))
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(20, 20, 20)
                        .add(imageLabel)
                        .add(18, 18, 18)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel1)
                            .add(streetTF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel2)
                            .add(NoBedTF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jLabel3)
                            .add(noBathTF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(squareFeetTF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel4))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel5)
                            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(houseLbl, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 239, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(priceLbl)
                            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(mapButton)
                                .add(viewPhotoButton)))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(87, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        try {
            s = new search(user, date);
            s.setVisible(true);
            this.setVisible(false);
        } catch (SQLException ex) {
            Logger.getLogger(retrieveUpdateDelete.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_backButtonActionPerformed

    private void previousButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousButActionPerformed
        try {
            insertDataPrev();
        } catch (SQLException ex) {
            Logger.getLogger(retrieveUpdateDelete.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_previousButActionPerformed

    private void updateButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButActionPerformed
        int result = JOptionPane.showConfirmDialog(this, "Are you sure, you wish to update this record ?", "Confirm Update",
                JOptionPane.YES_NO_OPTION);

        if (result == JOptionPane.YES_OPTION) {
            try {
                getData();
                searchResults.updateString("street", street);
                searchResults.updateInt("bedrooms", noBedrooms);
                searchResults.updateFloat("bathrooms", noBathrooms);
                searchResults.updateInt("squarefeet", squarefeet);
                searchResults.updateString("description", description);
                searchResults.updateRow();
                JOptionPane.showMessageDialog(this, "Record successfully updated", "Update Complete", JOptionPane.INFORMATION_MESSAGE);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "There was a problem updating this record \nPlease try again.", "ERROR", JOptionPane.WARNING_MESSAGE);
                JOptionPane.showMessageDialog(this, ex, "ERROR", JOptionPane.WARNING_MESSAGE);
            }

        } else {
            JOptionPane.showMessageDialog(null, "You have not udpated this record", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        updateBut.setEnabled(false);
        enableForm(false);

    }//GEN-LAST:event_updateButActionPerformed

    private void nextButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButActionPerformed
        try {
            // TODO add your handling code here:
            insertDataNext();
        } catch (SQLException ex) {
            Logger.getLogger(retrieveUpdateDelete.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_nextButActionPerformed

    private void deleteButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButActionPerformed
        int delete = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this Property",
                "Comfirm Deletion", JOptionPane.YES_NO_CANCEL_OPTION);
        if (delete == JOptionPane.YES_OPTION) {
            try {
                searchResults.deleteRow();
                if (!searchResults.last()) {
                    insertDataNext();
                } else if (searchResults.last()) {
                    insertDataPrev();
                } else if (searchResults.isAfterLast()) {
                    search s = new search(this.user, this.date);
                    s.setVisible(true);
                    this.setVisible(false);
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "There was a problem deleting this record \nPlease try again.", "ERROR", JOptionPane.WARNING_MESSAGE);
                JOptionPane.showMessageDialog(this, ex, "ERROR", JOptionPane.WARNING_MESSAGE);
            }
        } else if (delete == JOptionPane.NO_OPTION) {
            JOptionPane.showMessageDialog(this, "The record has not been deleted", "Attention", JOptionPane.INFORMATION_MESSAGE);
        }


    }//GEN-LAST:event_deleteButActionPerformed

    private void streetTFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_streetTFMouseClicked
        streetTF.setEnabled(true);
        updateBut.setEnabled(true);
        streetTF.requestFocus(true);
    }//GEN-LAST:event_streetTFMouseClicked

    private void NoBedTFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NoBedTFMouseClicked
        NoBedTF.setEnabled(true);
        updateBut.setEnabled(true);
        NoBedTF.requestFocus(true);
    }//GEN-LAST:event_NoBedTFMouseClicked

    private void noBathTFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_noBathTFMouseClicked
        noBathTF.setEnabled(true);
        updateBut.setEnabled(true);
        noBathTF.requestFocus(true);
    }//GEN-LAST:event_noBathTFMouseClicked

    private void squareFeetTFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareFeetTFMouseClicked
        squareFeetTF.setEnabled(true);
        updateBut.setEnabled(true);
        squareFeetTF.requestFocus(true);
    }//GEN-LAST:event_squareFeetTFMouseClicked

    private void descriptionTAMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_descriptionTAMouseClicked
        descriptionTA.setEnabled(true);
        updateBut.setEnabled(true);
        descriptionTA.requestFocus(true);
    }//GEN-LAST:event_descriptionTAMouseClicked

    private void mapButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mapButtonActionPerformed


        ImageIcon locmap;
        try {
            locmap = new ImageIcon("src/maps/" + searchResults.getString("map"));
            houseLbl.setIcon(locmap);
        } catch (SQLException ex) {
            Logger.getLogger(retrieveUpdateDelete.class.getName()).log(Level.SEVERE, null, ex);
        }

        mapButton.setVisible(false);
        viewPhotoButton.setVisible(true);



    }//GEN-LAST:event_mapButtonActionPerformed

    private void viewPhotoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewPhotoButtonActionPerformed
        houseLbl.setIcon(pics);

        mapButton.setVisible(true);
        viewPhotoButton.setVisible(false);
    }//GEN-LAST:event_viewPhotoButtonActionPerformed

    //used to make for enabled and disabled
    private void enableForm(boolean option) {
        streetTF.setEnabled(option);
        NoBedTF.setEnabled(option);
        noBathTF.setEnabled(option);
        squareFeetTF.setEnabled(option);
        descriptionTA.setEnabled(option);

    }

    //used to enable or disable buttons
    private void enableButtons(boolean option) {
        nextBut.setEnabled(option);
        previousBut.setEnabled(option);
        deleteBut.setEnabled(option);
        backButton.setEnabled(option);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField NoBedTF;
    private javax.swing.JButton backButton;
    private javax.swing.JButton deleteBut;
    private javax.swing.JTextArea descriptionTA;
    private javax.swing.JLabel houseLbl;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton mapButton;
    private javax.swing.JButton nextBut;
    private javax.swing.JTextField noBathTF;
    private javax.swing.JButton previousBut;
    private javax.swing.JLabel priceLbl;
    private javax.swing.JTextField squareFeetTF;
    private javax.swing.JTextField streetTF;
    private javax.swing.JButton updateBut;
    private javax.swing.JButton viewPhotoButton;
    // End of variables declaration//GEN-END:variables

    private void insertDataNext() throws SQLException {
        if (searchResults.next()) {
            id = searchResults.getInt("id");
            streetTF.setText(searchResults.getString("street"));
            NoBedTF.setText(searchResults.getInt("bedrooms") + "");
            noBathTF.setText(searchResults.getFloat("bathrooms") + "");
            squareFeetTF.setText(searchResults.getInt("squarefeet") + "");
            descriptionTA.setText(searchResults.getString("description"));


            pics = new ImageIcon("src/images/" + searchResults.getString("photo"));
            viewPhotoButton.setVisible(false);
            mapButton.setVisible(true);
            houseLbl.setIcon(pics);

            priceLbl.setText((currency.format(searchResults.getDouble("price"))));
        } else {
            JOptionPane.showMessageDialog(this, "You have reached the end of the list",
                    "Error", JOptionPane.ERROR_MESSAGE);
            insertDataPrev();
        }
    }

    private void insertDataPrev() throws SQLException {
        if (searchResults.previous()) {
            id = searchResults.getInt("id");
            streetTF.setText(searchResults.getString("street"));
            NoBedTF.setText(searchResults.getInt("bedrooms") + "");
            noBathTF.setText(searchResults.getFloat("bathrooms") + "");
            squareFeetTF.setText(searchResults.getInt("squarefeet") + "");
            descriptionTA.setText(searchResults.getString("description"));
            //photo = "images/";
            //photo += searchResults.getString("photo");
            //System.out.println(photo);
            //ImageIcon icon = createImageIcon(photo, "A photo of the properties");
            //houseLbl.setIcon(icon);
            pics = new ImageIcon("src/images/" + searchResults.getString("photo"));
            houseLbl.setIcon(pics);

            priceLbl.setText((currency.format(searchResults.getDouble("price"))));
        } else {
            JOptionPane.showMessageDialog(this, "You have reached the start of the list",
                    "Error", JOptionPane.ERROR_MESSAGE);
            insertDataNext();
        }
    }

    private void getData() {
        street = streetTF.getText();
        noBedrooms = Integer.parseInt(NoBedTF.getText());
        noBathrooms = Float.parseFloat(noBathTF.getText());
        squarefeet = Integer.parseInt(squareFeetTF.getText());
        description = descriptionTA.getText();
    }
}
